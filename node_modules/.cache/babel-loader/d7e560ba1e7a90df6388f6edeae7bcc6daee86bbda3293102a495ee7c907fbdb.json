{"ast":null,"code":"var _jsxFileName = \"C:\\\\MyProjects\\\\react-blog-template\\\\src\\\\components\\\\Plant\\\\PlantOfTheDay.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Container } from '../StyledComponents/StyledComponents';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlantContainer = styled(Container)`\n    text-align: center;\n    max-width: 800px;\n    margin: 0 auto;\n    padding: 2rem;\n    width: 100%;\n    box-sizing: border-box;\n    position: relative;\n\n    @media (max-width: ${props => props.theme.queries.mobile}) {\n        padding: 1rem;\n    }\n\n    h2 {\n        margin-top: 1rem;\n    }\n\n    h3 {\n        margin-top: 2rem;\n    }\n\n    p {\n        margin: 1rem auto;\n        max-width: 600px;\n    }\n`;\n_c = PlantContainer;\nconst PlantImage = styled.img`\n    width: 100%;\n    max-width: 600px;\n    height: auto;\n    border-radius: 8px;\n    margin: 1rem 0;\n    object-fit: cover;\n`;\n_c2 = PlantImage;\nconst PlantInfo = styled.div`\n    margin: 1rem 0;\n    padding: 1rem;\n    background-color: ${props => props.theme.colors.lightGray};\n    border-radius: 8px;\n`;\n_c3 = PlantInfo;\nconst PlantDetail = styled.div`\n    margin: 1rem 0;\n    \n    strong {\n        color: ${props => props.theme.colors.primary};\n    }\n`;\n_c4 = PlantDetail;\nconst LoadingContainer = styled(Container)`\n    text-align: center;\n    padding: 2rem;\n`;\nconst ErrorContainer = styled(Container)`\n    text-align: center;\n    padding: 2rem;\n    color: red;\n`;\nconst NextButton = styled.button`\n    background-color: #333;\n    color: white;\n    padding: 0.8rem 1.5rem;\n    border: none;\n    border-radius: 4px;\n    font-size: 1rem;\n    cursor: pointer;\n    margin-top: 1rem;\n    transition: background-color 0.3s;\n\n    &:hover {\n        background-color: #555;\n    } \n`;\n_c5 = NextButton;\nconst PlantOfTheDay = () => {\n  _s();\n  var _plant$distribution;\n  const [plant, setPlant] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [clientToken, setClientToken] = useState(null);\n  const history = useHistory();\n  const TOKEN = 'YPL0oCPPmylIEwr78weBx3uvF4s3qv2k4YnjfaBC53M';\n  useEffect(() => {\n    const getClientToken = async () => {\n      try {\n        const params = {\n          origin: window.location.origin,\n          token: TOKEN\n        };\n        const response = await axios({\n          method: 'post',\n          url: '/api/auth/claim',\n          data: params,\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          }\n        });\n        if (response.data && response.data.token) {\n          setClientToken(response.data.token);\n        } else {\n          throw new Error('No token received');\n        }\n      } catch (err) {\n        console.error('Error getting client token:', err);\n        setError('Failed to authenticate with the plant database');\n        setLoading(false);\n      }\n    };\n    getClientToken();\n  }, []);\n  const fetchPlant = async (attemptedIds = new Set()) => {\n    if (!clientToken) return;\n    try {\n      // Get a random plant ID between 1 and 10000\n      let plantId = Math.floor(Math.random() * 10000) + 1;\n\n      // If this ID has been attempted, try another one\n      while (attemptedIds.has(plantId)) {\n        plantId = Math.floor(Math.random() * 10000) + 1;\n      }\n      attemptedIds.add(plantId);\n      const response = await axios.get(`/api/v1/species/${plantId}?token=${clientToken}`, {\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n      if (response.data && response.data.data) {\n        // If the plant has no image and we haven't tried 5 times, try another plant\n        if (!response.data.data.image_url && attemptedIds.size < 5) {\n          return fetchPlant(attemptedIds);\n        }\n        setPlant(response.data.data);\n        setLoading(false);\n      } else {\n        throw new Error('Invalid plant data received');\n      }\n    } catch (err) {\n      console.error('Error fetching plant:', err);\n      // If we haven't tried 5 times and got an error, try another plant\n      if (attemptedIds.size < 5) {\n        return fetchPlant(attemptedIds);\n      }\n      setError(err.message);\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    if (clientToken) {\n      fetchPlant();\n    }\n  }, [clientToken]);\n  const handleNext = () => {\n    setLoading(true);\n    fetchPlant();\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(PlantContainer, {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Loading plant data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(PlantContainer, {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }, this);\n  }\n  if (!plant) {\n    return /*#__PURE__*/_jsxDEV(PlantContainer, {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No plant available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(PlantContainer, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: plant.common_name || plant.scientific_name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }, this), plant.image_url && /*#__PURE__*/_jsxDEV(PlantImage, {\n      src: plant.image_url,\n      alt: plant.common_name || plant.scientific_name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(PlantInfo, {\n      children: [/*#__PURE__*/_jsxDEV(PlantDetail, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Family:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 21\n        }, this), \" \", plant.family_common_name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }, this), plant.year && /*#__PURE__*/_jsxDEV(PlantDetail, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Year Discovered:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 25\n        }, this), \" \", plant.year]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 21\n      }, this), ((_plant$distribution = plant.distribution) === null || _plant$distribution === void 0 ? void 0 : _plant$distribution.native) && /*#__PURE__*/_jsxDEV(PlantDetail, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Origin:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 25\n        }, this), \" \", Array.isArray(plant.distribution.native) ? plant.distribution.native.join(', ') : plant.distribution.native]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NextButton, {\n      onClick: handleNext,\n      children: \"Next Plant\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 9\n  }, this);\n};\n_s(PlantOfTheDay, \"7/0RXu2P3NN5F9G5NsbtgoCUcIg=\", false, function () {\n  return [useHistory];\n});\n_c6 = PlantOfTheDay;\nexport default PlantOfTheDay;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"PlantContainer\");\n$RefreshReg$(_c2, \"PlantImage\");\n$RefreshReg$(_c3, \"PlantInfo\");\n$RefreshReg$(_c4, \"PlantDetail\");\n$RefreshReg$(_c5, \"NextButton\");\n$RefreshReg$(_c6, \"PlantOfTheDay\");","map":{"version":3,"names":["React","useState","useEffect","styled","Container","axios","useHistory","jsxDEV","_jsxDEV","PlantContainer","props","theme","queries","mobile","_c","PlantImage","img","_c2","PlantInfo","div","colors","lightGray","_c3","PlantDetail","primary","_c4","LoadingContainer","ErrorContainer","NextButton","button","_c5","PlantOfTheDay","_s","_plant$distribution","plant","setPlant","loading","setLoading","error","setError","clientToken","setClientToken","history","TOKEN","getClientToken","params","origin","window","location","token","response","method","url","data","headers","Error","err","console","fetchPlant","attemptedIds","Set","plantId","Math","floor","random","has","add","get","image_url","size","message","handleNext","children","fileName","_jsxFileName","lineNumber","columnNumber","common_name","scientific_name","src","alt","family_common_name","year","distribution","native","Array","isArray","join","onClick","_c6","$RefreshReg$"],"sources":["C:/MyProjects/react-blog-template/src/components/Plant/PlantOfTheDay.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Container } from '../StyledComponents/StyledComponents';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\n\nconst PlantContainer = styled(Container)`\n    text-align: center;\n    max-width: 800px;\n    margin: 0 auto;\n    padding: 2rem;\n    width: 100%;\n    box-sizing: border-box;\n    position: relative;\n\n    @media (max-width: ${props => props.theme.queries.mobile}) {\n        padding: 1rem;\n    }\n\n    h2 {\n        margin-top: 1rem;\n    }\n\n    h3 {\n        margin-top: 2rem;\n    }\n\n    p {\n        margin: 1rem auto;\n        max-width: 600px;\n    }\n`;\n\nconst PlantImage = styled.img`\n    width: 100%;\n    max-width: 600px;\n    height: auto;\n    border-radius: 8px;\n    margin: 1rem 0;\n    object-fit: cover;\n`;\n\nconst PlantInfo = styled.div`\n    margin: 1rem 0;\n    padding: 1rem;\n    background-color: ${props => props.theme.colors.lightGray};\n    border-radius: 8px;\n`;\n\nconst PlantDetail = styled.div`\n    margin: 1rem 0;\n    \n    strong {\n        color: ${props => props.theme.colors.primary};\n    }\n`;\n\nconst LoadingContainer = styled(Container)`\n    text-align: center;\n    padding: 2rem;\n`;\n\nconst ErrorContainer = styled(Container)`\n    text-align: center;\n    padding: 2rem;\n    color: red;\n`;\n\nconst NextButton = styled.button`\n    background-color: #333;\n    color: white;\n    padding: 0.8rem 1.5rem;\n    border: none;\n    border-radius: 4px;\n    font-size: 1rem;\n    cursor: pointer;\n    margin-top: 1rem;\n    transition: background-color 0.3s;\n\n    &:hover {\n        background-color: #555;\n    } \n`;\n\nconst PlantOfTheDay = () => {\n    const [plant, setPlant] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [clientToken, setClientToken] = useState(null);\n    const history = useHistory();\n    const TOKEN = 'YPL0oCPPmylIEwr78weBx3uvF4s3qv2k4YnjfaBC53M';\n\n    useEffect(() => {\n        const getClientToken = async () => {\n            try {\n                const params = {\n                    origin: window.location.origin,\n                    token: TOKEN\n                };\n\n                const response = await axios({\n                    method: 'post',\n                    url: '/api/auth/claim',\n                    data: params,\n                    headers: { \n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json'\n                    }\n                });\n\n                if (response.data && response.data.token) {\n                    setClientToken(response.data.token);\n                } else {\n                    throw new Error('No token received');\n                }\n            } catch (err) {\n                console.error('Error getting client token:', err);\n                setError('Failed to authenticate with the plant database');\n                setLoading(false);\n            }\n        };\n\n        getClientToken();\n    }, []);\n\n    const fetchPlant = async (attemptedIds = new Set()) => {\n        if (!clientToken) return;\n\n        try {\n            // Get a random plant ID between 1 and 10000\n            let plantId = Math.floor(Math.random() * 10000) + 1;\n\n            // If this ID has been attempted, try another one\n            while (attemptedIds.has(plantId)) {\n                plantId = Math.floor(Math.random() * 10000) + 1;\n            }\n            attemptedIds.add(plantId);\n\n            const response = await axios.get(\n                `/api/v1/species/${plantId}?token=${clientToken}`,\n                {\n                    headers: {\n                        'Accept': 'application/json'\n                    }\n                }\n            );\n\n            if (response.data && response.data.data) {\n                // If the plant has no image and we haven't tried 5 times, try another plant\n                if (!response.data.data.image_url && attemptedIds.size < 5) {\n                    return fetchPlant(attemptedIds);\n                }\n                setPlant(response.data.data);\n                setLoading(false);\n            } else {\n                throw new Error('Invalid plant data received');\n            }\n        } catch (err) {\n            console.error('Error fetching plant:', err);\n            // If we haven't tried 5 times and got an error, try another plant\n            if (attemptedIds.size < 5) {\n                return fetchPlant(attemptedIds);\n            }\n            setError(err.message);\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        if (clientToken) {\n            fetchPlant();\n        }\n    }, [clientToken]);\n\n    const handleNext = () => {\n        setLoading(true);\n        fetchPlant();\n    };\n\n    if (loading) {\n        return (\n            <PlantContainer>\n                <h2>Loading plant data...</h2>\n            </PlantContainer>\n        );\n    }\n\n    if (error) {\n        return (\n            <PlantContainer>\n                <h2>Error: {error}</h2>\n            </PlantContainer>\n        );\n    }\n\n    if (!plant) {\n        return (\n            <PlantContainer>\n                <h2>No plant available</h2>\n            </PlantContainer>\n        );\n    }\n\n    return (\n        <PlantContainer>\n            <h2>{plant.common_name || plant.scientific_name}</h2>\n            \n            {plant.image_url && (\n                <PlantImage src={plant.image_url} alt={plant.common_name || plant.scientific_name} />\n            )}\n            \n            <PlantInfo>\n                <PlantDetail>\n                    <strong>Family:</strong> {plant.family_common_name}\n                </PlantDetail>\n                {plant.year && (\n                    <PlantDetail>\n                        <strong>Year Discovered:</strong> {plant.year}\n                    </PlantDetail>\n                )}\n                {plant.distribution?.native && (\n                    <PlantDetail>\n                        <strong>Origin:</strong> {Array.isArray(plant.distribution.native) \n                            ? plant.distribution.native.join(', ') \n                            : plant.distribution.native}\n                    </PlantDetail>\n                )}\n            </PlantInfo>\n\n            <NextButton onClick={handleNext}>Next Plant</NextButton>\n        </PlantContainer>\n    );\n};\n\nexport default PlantOfTheDay;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}