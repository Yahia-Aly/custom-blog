{"ast":null,"code":"var _jsxFileName = \"C:\\\\MyProjects\\\\react-blog-template\\\\src\\\\components\\\\Plant\\\\PlantOfTheDay.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Container } from '../StyledComponents/StyledComponents';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PlantImage = styled.img`\n    width: 100%;\n    max-width: 600px;\n    height: auto;\n    border-radius: 8px;\n    margin: 2rem 0;\n    object-fit: cover;\n`;\n_c = PlantImage;\nconst PlantInfo = styled.div`\n    margin: 2rem 0;\n    padding: 2rem;\n    background-color: ${props => props.theme.colors.lightGray};\n    border-radius: 8px;\n`;\n_c2 = PlantInfo;\nconst PlantDetail = styled.div`\n    margin: 1rem 0;\n    \n    strong {\n        color: ${props => props.theme.colors.primary};\n    }\n`;\n_c3 = PlantDetail;\nconst LoadingContainer = styled(Container)`\n    text-align: center;\n    padding: 2rem;\n`;\n_c4 = LoadingContainer;\nconst ErrorContainer = styled(Container)`\n    text-align: center;\n    padding: 2rem;\n    color: red;\n`;\n_c5 = ErrorContainer;\nconst PlantOfTheDay = () => {\n  _s();\n  const [plant, setPlant] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [clientToken, setClientToken] = useState(null);\n  const TOKEN = 'YPL0oCPPmylIEwr78weBx3uvF4s3qv2k4YnjfaBC53M';\n\n  // First, get a client-side token\n  useEffect(() => {\n    const getClientToken = async () => {\n      try {\n        const params = {\n          origin: window.location.origin,\n          token: TOKEN\n        };\n        const response = await fetch('https://trefle.io/api/auth/claim', {\n          method: 'post',\n          body: JSON.stringify(params),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (!response.ok) {\n          throw new Error('Failed to get client token');\n        }\n        const data = await response.json();\n        setClientToken(data.token);\n      } catch (err) {\n        console.error('Error getting client token:', err);\n        setError('Failed to authenticate with the plant database');\n        setLoading(false);\n      }\n    };\n    getClientToken();\n  }, []);\n\n  // Then fetch the plant data once we have the client token\n  useEffect(() => {\n    const fetchPlant = async () => {\n      if (!clientToken) return;\n      try {\n        // Get today's date to generate a consistent ID\n        const today = new Date().toISOString().split('T')[0];\n        const dateNum = parseInt(today.replace(/-/g, ''), 10);\n\n        // Use the date to select a plant ID between 1 and 100\n        const plantId = dateNum % 100 + 1;\n        const response = await fetch(`https://trefle.io/api/v1/species/${plantId}?token=${clientToken}`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch plant data');\n        }\n        const data = await response.json();\n        console.log('Plant data:', data);\n        setPlant(data.data);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching plant:', err);\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n    fetchPlant();\n  }, [clientToken]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(LoadingContainer, {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Loading today's featured plant...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(ErrorContainer, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Error loading plant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this);\n  }\n  if (!plant) {\n    return /*#__PURE__*/_jsxDEV(ErrorContainer, {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No plant data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Plant of the Day: \", plant.common_name || plant.scientific_name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: /*#__PURE__*/_jsxDEV(\"em\", {\n        children: plant.scientific_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this), plant.image_url && /*#__PURE__*/_jsxDEV(PlantImage, {\n      src: plant.image_url,\n      alt: plant.common_name || plant.scientific_name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(PlantInfo, {\n      children: [/*#__PURE__*/_jsxDEV(PlantDetail, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Family:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this), \" \", plant.family]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PlantDetail, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Genus:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this), \" \", plant.genus]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this), plant.year && /*#__PURE__*/_jsxDEV(PlantDetail, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Year Discovered:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 25\n        }, this), \" \", plant.year]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 21\n      }, this), plant.bibliography && /*#__PURE__*/_jsxDEV(PlantDetail, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Bibliography:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 25\n        }, this), \" \", plant.bibliography]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }, this), plant.author && /*#__PURE__*/_jsxDEV(PlantDetail, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Author:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 25\n        }, this), \" \", plant.author]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 21\n      }, this), plant.rank && /*#__PURE__*/_jsxDEV(PlantDetail, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Rank:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 25\n        }, this), \" \", plant.rank]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 21\n      }, this), plant.status && /*#__PURE__*/_jsxDEV(PlantDetail, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Status:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 25\n        }, this), \" \", plant.status]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this), plant.observations && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Additional Information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: plant.observations\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 9\n  }, this);\n};\n_s(PlantOfTheDay, \"VfmpNMRLCojm08lNOjIJa0hBVg8=\");\n_c6 = PlantOfTheDay;\nexport default PlantOfTheDay;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"PlantImage\");\n$RefreshReg$(_c2, \"PlantInfo\");\n$RefreshReg$(_c3, \"PlantDetail\");\n$RefreshReg$(_c4, \"LoadingContainer\");\n$RefreshReg$(_c5, \"ErrorContainer\");\n$RefreshReg$(_c6, \"PlantOfTheDay\");","map":{"version":3,"names":["React","useState","useEffect","styled","Container","jsxDEV","_jsxDEV","Fragment","_Fragment","PlantImage","img","_c","PlantInfo","div","props","theme","colors","lightGray","_c2","PlantDetail","primary","_c3","LoadingContainer","_c4","ErrorContainer","_c5","PlantOfTheDay","_s","plant","setPlant","loading","setLoading","error","setError","clientToken","setClientToken","TOKEN","getClientToken","params","origin","window","location","token","response","fetch","method","body","JSON","stringify","headers","ok","Error","data","json","err","console","fetchPlant","today","Date","toISOString","split","dateNum","parseInt","replace","plantId","log","message","children","fileName","_jsxFileName","lineNumber","columnNumber","common_name","scientific_name","image_url","src","alt","family","genus","year","bibliography","author","rank","status","observations","_c6","$RefreshReg$"],"sources":["C:/MyProjects/react-blog-template/src/components/Plant/PlantOfTheDay.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Container } from '../StyledComponents/StyledComponents';\r\n\r\nconst PlantImage = styled.img`\r\n    width: 100%;\r\n    max-width: 600px;\r\n    height: auto;\r\n    border-radius: 8px;\r\n    margin: 2rem 0;\r\n    object-fit: cover;\r\n`;\r\n\r\nconst PlantInfo = styled.div`\r\n    margin: 2rem 0;\r\n    padding: 2rem;\r\n    background-color: ${props => props.theme.colors.lightGray};\r\n    border-radius: 8px;\r\n`;\r\n\r\nconst PlantDetail = styled.div`\r\n    margin: 1rem 0;\r\n    \r\n    strong {\r\n        color: ${props => props.theme.colors.primary};\r\n    }\r\n`;\r\n\r\nconst LoadingContainer = styled(Container)`\r\n    text-align: center;\r\n    padding: 2rem;\r\n`;\r\n\r\nconst ErrorContainer = styled(Container)`\r\n    text-align: center;\r\n    padding: 2rem;\r\n    color: red;\r\n`;\r\n\r\nconst PlantOfTheDay = () => {\r\n    const [plant, setPlant] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [clientToken, setClientToken] = useState(null);\r\n    const TOKEN = 'YPL0oCPPmylIEwr78weBx3uvF4s3qv2k4YnjfaBC53M';\r\n\r\n    // First, get a client-side token\r\n    useEffect(() => {\r\n        const getClientToken = async () => {\r\n            try {\r\n                const params = {\r\n                    origin: window.location.origin,\r\n                    token: TOKEN\r\n                };\r\n\r\n                const response = await fetch('https://trefle.io/api/auth/claim', {\r\n                    method: 'post',\r\n                    body: JSON.stringify(params),\r\n                    headers: { 'Content-Type': 'application/json' }\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to get client token');\r\n                }\r\n\r\n                const data = await response.json();\r\n                setClientToken(data.token);\r\n            } catch (err) {\r\n                console.error('Error getting client token:', err);\r\n                setError('Failed to authenticate with the plant database');\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        getClientToken();\r\n    }, []);\r\n\r\n    // Then fetch the plant data once we have the client token\r\n    useEffect(() => {\r\n        const fetchPlant = async () => {\r\n            if (!clientToken) return;\r\n\r\n            try {\r\n                // Get today's date to generate a consistent ID\r\n                const today = new Date().toISOString().split('T')[0];\r\n                const dateNum = parseInt(today.replace(/-/g, ''), 10);\r\n                \r\n                // Use the date to select a plant ID between 1 and 100\r\n                const plantId = (dateNum % 100) + 1;\r\n\r\n                const response = await fetch(\r\n                    `https://trefle.io/api/v1/species/${plantId}?token=${clientToken}`\r\n                );\r\n\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch plant data');\r\n                }\r\n\r\n                const data = await response.json();\r\n                console.log('Plant data:', data);\r\n                setPlant(data.data);\r\n                setLoading(false);\r\n            } catch (err) {\r\n                console.error('Error fetching plant:', err);\r\n                setError(err.message);\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchPlant();\r\n    }, [clientToken]);\r\n\r\n    if (loading) {\r\n        return (\r\n            <LoadingContainer>\r\n                <h2>Loading today's featured plant...</h2>\r\n            </LoadingContainer>\r\n        );\r\n    }\r\n\r\n    if (error) {\r\n        return (\r\n            <ErrorContainer>\r\n                <h2>Error loading plant</h2>\r\n                <p>{error}</p>\r\n            </ErrorContainer>\r\n        );\r\n    }\r\n\r\n    if (!plant) {\r\n        return (\r\n            <ErrorContainer>\r\n                <h2>No plant data available</h2>\r\n            </ErrorContainer>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <h2>Plant of the Day: {plant.common_name || plant.scientific_name}</h2>\r\n            <h3><em>{plant.scientific_name}</em></h3>\r\n            \r\n            {plant.image_url && (\r\n                <PlantImage src={plant.image_url} alt={plant.common_name || plant.scientific_name} />\r\n            )}\r\n            \r\n            <PlantInfo>\r\n                <PlantDetail>\r\n                    <strong>Family:</strong> {plant.family}\r\n                </PlantDetail>\r\n                <PlantDetail>\r\n                    <strong>Genus:</strong> {plant.genus}\r\n                </PlantDetail>\r\n                {plant.year && (\r\n                    <PlantDetail>\r\n                        <strong>Year Discovered:</strong> {plant.year}\r\n                    </PlantDetail>\r\n                )}\r\n                {plant.bibliography && (\r\n                    <PlantDetail>\r\n                        <strong>Bibliography:</strong> {plant.bibliography}\r\n                    </PlantDetail>\r\n                )}\r\n                {plant.author && (\r\n                    <PlantDetail>\r\n                        <strong>Author:</strong> {plant.author}\r\n                    </PlantDetail>\r\n                )}\r\n                {plant.rank && (\r\n                    <PlantDetail>\r\n                        <strong>Rank:</strong> {plant.rank}\r\n                    </PlantDetail>\r\n                )}\r\n                {plant.status && (\r\n                    <PlantDetail>\r\n                        <strong>Status:</strong> {plant.status}\r\n                    </PlantDetail>\r\n                )}\r\n            </PlantInfo>\r\n\r\n            {plant.observations && (\r\n                <>\r\n                    <h3>Additional Information</h3>\r\n                    <p>{plant.observations}</p>\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default PlantOfTheDay;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}