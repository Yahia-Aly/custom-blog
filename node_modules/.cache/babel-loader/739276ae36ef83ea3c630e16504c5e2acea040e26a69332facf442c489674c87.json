{"ast":null,"code":"var _jsxFileName = \"C:\\\\MyProjects\\\\react-blog-template\\\\src\\\\components\\\\Plant\\\\PlantOfTheDay.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Container } from '../StyledComponents/StyledComponents';\nimport styled from 'styled-components';\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlantContainer = styled(Container)`\n    text-align: center;\n    max-width: 800px;\n    margin: 0 auto;\n    padding: 2rem;\n    width: 100%;\n    box-sizing: border-box;\n    position: relative;\n\n    @media (max-width: ${props => props.theme.queries.mobile}) {\n        padding: 1rem;\n    }\n\n    h2 {\n        margin-top: 1rem;\n    }\n\n    h3 {\n        margin-top: 2rem;\n    }\n\n    p {\n        margin: 1rem auto;\n        max-width: 600px;\n    }\n`;\n_c = PlantContainer;\nconst PlantImage = styled.img`\n    max-width: 35%;\n    max-height: 35%;\n    border-radius: 8px;\n    margin: 2rem auto;\n    display: block;\n    object-fit: fill;\n`;\n_c2 = PlantImage;\nconst CareSection = styled.div`\n    margin: 2rem auto;\n    text-align: left;\n    max-width: 600px;\n`;\n_c3 = CareSection;\nconst CareList = styled.ul`\n    list-style-type: none;\n    padding: 0;\n    margin: 1rem 0;\n`;\n_c4 = CareList;\nconst CareItem = styled.li`\n    margin: 0.5rem 0;\n    padding-left: 1.5rem;\n    position: relative;\n\n    &:before {\n        content: \"â€¢\";\n        position: absolute;\n        left: 0;\n        color: #333;\n    }\n`;\n_c5 = CareItem;\nconst NextButton = styled.button`\n    background-color: #333;\n    color: white;\n    padding: 0.8rem 1.5rem;\n    border: none;\n    border-radius: 4px;\n    font-size: 1rem;\n    cursor: pointer;\n    margin-top: 1rem;\n    transition: background-color 0.3s;\n\n    &:hover {\n        background-color: #555;\n    }\n`;\n_c6 = NextButton;\nconst PlantOfTheDay = () => {\n  _s();\n  var _currentPlant$distrib;\n  const [currentPlantIndex, setCurrentPlantIndex] = useState(0);\n  const [plants, setPlants] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [clientToken, setClientToken] = useState(null);\n  const history = useHistory();\n  const TOKEN = 'YPL0oCPPmylIEwr78weBx3uvF4s3qv2k4YnjfaBC53M';\n  useEffect(() => {\n    const fetchClientToken = async () => {\n      try {\n        const response = await axios.get('https://perenual.com/api/auth/token', {\n          headers: {\n            'Authorization': `Bearer ${TOKEN}`\n          }\n        });\n        setClientToken(response.data.token);\n      } catch (err) {\n        console.error('Error fetching client token:', err);\n        setError('Failed to authenticate with plant API');\n        setLoading(false);\n      }\n    };\n    fetchClientToken();\n  }, []);\n  useEffect(() => {\n    const fetchPlants = async (attemptedIds = new Set()) => {\n      if (!clientToken) return;\n      try {\n        // Get a random plant ID between 1 and 10000\n        let plantId = Math.floor(Math.random() * 10000) + 1;\n\n        // If this ID has been attempted, try another one\n        while (attemptedIds.has(plantId)) {\n          plantId = Math.floor(Math.random() * 10000) + 1;\n        }\n        attemptedIds.add(plantId);\n        const response = await axios.get(`/api/v1/species/${plantId}?token=${clientToken}`, {\n          headers: {\n            'Accept': 'application/json'\n          }\n        });\n        if (response.data && response.data.data) {\n          // If the plant has no image and we haven't tried 5 times, try another plant\n          if (!response.data.data.image_url && attemptedIds.size < 5) {\n            return fetchPlants(attemptedIds);\n          }\n          setPlants(prevPlants => [...prevPlants, response.data.data]);\n          setLoading(false);\n        } else {\n          throw new Error('Invalid plant data received');\n        }\n      } catch (err) {\n        console.error('Error fetching plant:', err);\n        // If we haven't tried 5 times and got an error, try another plant\n        if (attemptedIds.size < 5) {\n          return fetchPlants(attemptedIds);\n        }\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n    fetchPlants();\n  }, [clientToken]);\n  const handleNext = () => {\n    if (plants.length > 0) {\n      setCurrentPlantIndex(prevIndex => (prevIndex + 1) % plants.length);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(PlantContainer, {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Loading plant data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(PlantContainer, {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this);\n  }\n  if (!plants.length) {\n    return /*#__PURE__*/_jsxDEV(PlantContainer, {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No plants available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this);\n  }\n  const currentPlant = plants[currentPlantIndex];\n  return /*#__PURE__*/_jsxDEV(PlantContainer, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: currentPlant.common_name || currentPlant.scientific_name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }, this), currentPlant.image_url && /*#__PURE__*/_jsxDEV(PlantImage, {\n      src: currentPlant.image_url,\n      alt: currentPlant.common_name || currentPlant.scientific_name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(CareSection, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Plant Information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CareList, {\n        children: [currentPlant.family_common_name && /*#__PURE__*/_jsxDEV(CareItem, {\n          children: [\"Family: \", currentPlant.family_common_name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 25\n        }, this), currentPlant.year && /*#__PURE__*/_jsxDEV(CareItem, {\n          children: [\"Year Discovered: \", currentPlant.year]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 25\n        }, this), ((_currentPlant$distrib = currentPlant.distribution) === null || _currentPlant$distrib === void 0 ? void 0 : _currentPlant$distrib.native) && /*#__PURE__*/_jsxDEV(CareItem, {\n          children: [\"Origin: \", currentPlant.distribution.native]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NextButton, {\n      onClick: handleNext,\n      children: \"Next Plant\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 9\n  }, this);\n};\n_s(PlantOfTheDay, \"Z7UuAWTJBhrMjB0+ezBNfWDOTfA=\", false, function () {\n  return [useHistory];\n});\n_c7 = PlantOfTheDay;\nexport default PlantOfTheDay;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"PlantContainer\");\n$RefreshReg$(_c2, \"PlantImage\");\n$RefreshReg$(_c3, \"CareSection\");\n$RefreshReg$(_c4, \"CareList\");\n$RefreshReg$(_c5, \"CareItem\");\n$RefreshReg$(_c6, \"NextButton\");\n$RefreshReg$(_c7, \"PlantOfTheDay\");","map":{"version":3,"names":["React","useState","useEffect","Container","styled","useHistory","axios","jsxDEV","_jsxDEV","PlantContainer","props","theme","queries","mobile","_c","PlantImage","img","_c2","CareSection","div","_c3","CareList","ul","_c4","CareItem","li","_c5","NextButton","button","_c6","PlantOfTheDay","_s","_currentPlant$distrib","currentPlantIndex","setCurrentPlantIndex","plants","setPlants","loading","setLoading","error","setError","clientToken","setClientToken","history","TOKEN","fetchClientToken","response","get","headers","data","token","err","console","fetchPlants","attemptedIds","Set","plantId","Math","floor","random","has","add","image_url","size","prevPlants","Error","message","handleNext","length","prevIndex","children","fileName","_jsxFileName","lineNumber","columnNumber","currentPlant","common_name","scientific_name","src","alt","family_common_name","year","distribution","native","onClick","_c7","$RefreshReg$"],"sources":["C:/MyProjects/react-blog-template/src/components/Plant/PlantOfTheDay.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container } from '../StyledComponents/StyledComponents';\nimport styled from 'styled-components';\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\n\nconst PlantContainer = styled(Container)`\n    text-align: center;\n    max-width: 800px;\n    margin: 0 auto;\n    padding: 2rem;\n    width: 100%;\n    box-sizing: border-box;\n    position: relative;\n\n    @media (max-width: ${props => props.theme.queries.mobile}) {\n        padding: 1rem;\n    }\n\n    h2 {\n        margin-top: 1rem;\n    }\n\n    h3 {\n        margin-top: 2rem;\n    }\n\n    p {\n        margin: 1rem auto;\n        max-width: 600px;\n    }\n`;\n\nconst PlantImage = styled.img`\n    max-width: 35%;\n    max-height: 35%;\n    border-radius: 8px;\n    margin: 2rem auto;\n    display: block;\n    object-fit: fill;\n`;\n\nconst CareSection = styled.div`\n    margin: 2rem auto;\n    text-align: left;\n    max-width: 600px;\n`;\n\nconst CareList = styled.ul`\n    list-style-type: none;\n    padding: 0;\n    margin: 1rem 0;\n`;\n\nconst CareItem = styled.li`\n    margin: 0.5rem 0;\n    padding-left: 1.5rem;\n    position: relative;\n\n    &:before {\n        content: \"â€¢\";\n        position: absolute;\n        left: 0;\n        color: #333;\n    }\n`;\n\nconst NextButton = styled.button`\n    background-color: #333;\n    color: white;\n    padding: 0.8rem 1.5rem;\n    border: none;\n    border-radius: 4px;\n    font-size: 1rem;\n    cursor: pointer;\n    margin-top: 1rem;\n    transition: background-color 0.3s;\n\n    &:hover {\n        background-color: #555;\n    }\n`;\n\nconst PlantOfTheDay = () => {\n    const [currentPlantIndex, setCurrentPlantIndex] = useState(0);\n    const [plants, setPlants] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [clientToken, setClientToken] = useState(null);\n    const history = useHistory();\n    const TOKEN = 'YPL0oCPPmylIEwr78weBx3uvF4s3qv2k4YnjfaBC53M';\n\n    useEffect(() => {\n        const fetchClientToken = async () => {\n            try {\n                const response = await axios.get('https://perenual.com/api/auth/token', {\n                    headers: {\n                        'Authorization': `Bearer ${TOKEN}`\n                    }\n                });\n                setClientToken(response.data.token);\n            } catch (err) {\n                console.error('Error fetching client token:', err);\n                setError('Failed to authenticate with plant API');\n                setLoading(false);\n            }\n        };\n\n        fetchClientToken();\n    }, []);\n\n    useEffect(() => {\n        const fetchPlants = async (attemptedIds = new Set()) => {\n            if (!clientToken) return;\n\n            try {\n                // Get a random plant ID between 1 and 10000\n                let plantId = Math.floor(Math.random() * 10000) + 1;\n\n                // If this ID has been attempted, try another one\n                while (attemptedIds.has(plantId)) {\n                    plantId = Math.floor(Math.random() * 10000) + 1;\n                }\n                attemptedIds.add(plantId);\n\n                const response = await axios.get(\n                    `/api/v1/species/${plantId}?token=${clientToken}`,\n                    {\n                        headers: {\n                            'Accept': 'application/json'\n                        }\n                    }\n                );\n\n                if (response.data && response.data.data) {\n                    // If the plant has no image and we haven't tried 5 times, try another plant\n                    if (!response.data.data.image_url && attemptedIds.size < 5) {\n                        return fetchPlants(attemptedIds);\n                    }\n                    setPlants(prevPlants => [...prevPlants, response.data.data]);\n                    setLoading(false);\n                } else {\n                    throw new Error('Invalid plant data received');\n                }\n            } catch (err) {\n                console.error('Error fetching plant:', err);\n                // If we haven't tried 5 times and got an error, try another plant\n                if (attemptedIds.size < 5) {\n                    return fetchPlants(attemptedIds);\n                }\n                setError(err.message);\n                setLoading(false);\n            }\n        };\n\n        fetchPlants();\n    }, [clientToken]);\n\n    const handleNext = () => {\n        if (plants.length > 0) {\n            setCurrentPlantIndex((prevIndex) => (prevIndex + 1) % plants.length);\n        }\n    };\n\n    if (loading) {\n        return (\n            <PlantContainer>\n                <h2>Loading plant data...</h2>\n            </PlantContainer>\n        );\n    }\n\n    if (error) {\n        return (\n            <PlantContainer>\n                <h2>Error: {error}</h2>\n            </PlantContainer>\n        );\n    }\n\n    if (!plants.length) {\n        return (\n            <PlantContainer>\n                <h2>No plants available</h2>\n            </PlantContainer>\n        );\n    }\n\n    const currentPlant = plants[currentPlantIndex];\n\n    return (\n        <PlantContainer>\n            <h2>{currentPlant.common_name || currentPlant.scientific_name}</h2>\n            \n            {currentPlant.image_url && (\n                <PlantImage src={currentPlant.image_url} alt={currentPlant.common_name || currentPlant.scientific_name} />\n            )}\n            \n            <CareSection>\n                <h3>Plant Information</h3>\n                <CareList>\n                    {currentPlant.family_common_name && (\n                        <CareItem>Family: {currentPlant.family_common_name}</CareItem>\n                    )}\n                    {currentPlant.year && (\n                        <CareItem>Year Discovered: {currentPlant.year}</CareItem>\n                    )}\n                    {currentPlant.distribution?.native && (\n                        <CareItem>Origin: {currentPlant.distribution.native}</CareItem>\n                    )}\n                </CareList>\n            </CareSection>\n\n            <NextButton onClick={handleNext}>Next Plant</NextButton>\n        </PlantContainer>\n    );\n};\n\nexport default PlantOfTheDay;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}