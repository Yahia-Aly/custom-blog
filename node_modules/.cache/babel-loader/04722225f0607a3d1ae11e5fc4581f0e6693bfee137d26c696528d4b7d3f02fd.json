{"ast":null,"code":"var _jsxFileName = \"C:\\\\MyProjects\\\\react-blog-template\\\\src\\\\components\\\\Plant\\\\PlantOfTheDay.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Container } from '../StyledComponents/StyledComponents';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlantImage = styled.img`\n    width: 100%;\n    max-width: 600px;\n    height: auto;\n    border-radius: 8px;\n    margin: 1rem 0;\n    object-fit: cover;\n`;\n_c = PlantImage;\nconst PlantInfo = styled.div`\n    margin: 1rem 0;\n    padding: 1rem;\n    background-color: ${props => props.theme.colors.lightGray};\n    border-radius: 8px;\n`;\n_c2 = PlantInfo;\nconst PlantDetail = styled.div`\n    margin: 1rem 0;\n    \n    strong {\n        color: ${props => props.theme.colors.primary};\n    }\n`;\n_c3 = PlantDetail;\nconst LoadingContainer = styled(Container)`\n    text-align: center;\n    padding: 2rem;\n`;\n_c4 = LoadingContainer;\nconst ErrorContainer = styled(Container)`\n    text-align: center;\n    padding: 2rem;\n    color: red;\n`;\n_c5 = ErrorContainer;\nconst PlantOfTheDay = () => {\n  _s();\n  const [plant, setPlant] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [clientToken, setClientToken] = useState(null);\n  const TOKEN = 'YPL0oCPPmylIEwr78weBx3uvF4s3qv2k4YnjfaBC53M';\n\n  // First, get a client-side token\n  useEffect(() => {\n    const getClientToken = async () => {\n      try {\n        const params = {\n          origin: window.location.origin,\n          token: TOKEN\n        };\n        const response = await axios({\n          method: 'post',\n          url: '/api/auth/claim',\n          data: params,\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          }\n        });\n        if (response.data && response.data.token) {\n          setClientToken(response.data.token);\n        } else {\n          throw new Error('No token received');\n        }\n      } catch (err) {\n        console.error('Error getting client token:', err);\n        setError('Failed to authenticate with the plant database');\n        setLoading(false);\n      }\n    };\n    getClientToken();\n  }, []);\n\n  // Then fetch the plant data once we have the client token\n  useEffect(() => {\n    const fetchPlant = async (attemptedIds = new Set()) => {\n      if (!clientToken) return;\n      try {\n        // Get today's date to generate a consistent ID\n        const today = new Date().toISOString().split('T')[0];\n        const dateNum = parseInt(today.replace(/-/g, ''), 10);\n\n        // Use the date to select a plant ID between 1 and 10000\n        let plantId = dateNum % 10000 + 1;\n\n        // If this ID has been attempted, increment until we find one we haven't tried\n        while (attemptedIds.has(plantId)) {\n          plantId = plantId % 10000 + 1;\n        }\n        attemptedIds.add(plantId);\n        const response = await axios.get(`/api/v1/species/${plantId}?token=${clientToken}`, {\n          headers: {\n            'Accept': 'application/json'\n          }\n        });\n        if (response.data && response.data.data) {\n          // If the plant has no image and we haven't tried 5 times, try another plant\n          if (!response.data.data.image_url && attemptedIds.size < 5) {\n            return fetchPlant(attemptedIds);\n          }\n          setPlant(response.data.data);\n        } else {\n          throw new Error('Invalid plant data received');\n        }\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching plant:', err);\n        // If we haven't tried 5 times and got an error, try another plant\n        if (attemptedIds.size < 5) {\n          return fetchPlant(attemptedIds);\n        }\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n    fetchPlant();\n  }, [clientToken]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(LoadingContainer, {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Loading today's featured plant...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(ErrorContainer, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Error loading plant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this);\n  }\n  if (!plant) {\n    return /*#__PURE__*/_jsxDEV(ErrorContainer, {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No plant data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: plant.common_name || plant.scientific_name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this), plant.image_url && /*#__PURE__*/_jsxDEV(PlantImage, {\n      src: plant.image_url,\n      alt: plant.common_name || plant.scientific_name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(PlantInfo, {\n      children: [/*#__PURE__*/_jsxDEV(PlantDetail, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Family:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this), \" \", plant.family_common_name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), plant.year && /*#__PURE__*/_jsxDEV(PlantDetail, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Year Discovered:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 25\n        }, this), \" \", plant.year]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 21\n      }, this), plant.bibliography && /*#__PURE__*/_jsxDEV(PlantDetail, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Origin:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 25\n        }, this), \" \", plant.distribution.native]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 9\n  }, this);\n};\n_s(PlantOfTheDay, \"VfmpNMRLCojm08lNOjIJa0hBVg8=\");\n_c6 = PlantOfTheDay;\nexport default PlantOfTheDay;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"PlantImage\");\n$RefreshReg$(_c2, \"PlantInfo\");\n$RefreshReg$(_c3, \"PlantDetail\");\n$RefreshReg$(_c4, \"LoadingContainer\");\n$RefreshReg$(_c5, \"ErrorContainer\");\n$RefreshReg$(_c6, \"PlantOfTheDay\");","map":{"version":3,"names":["React","useState","useEffect","styled","Container","axios","jsxDEV","_jsxDEV","PlantImage","img","_c","PlantInfo","div","props","theme","colors","lightGray","_c2","PlantDetail","primary","_c3","LoadingContainer","_c4","ErrorContainer","_c5","PlantOfTheDay","_s","plant","setPlant","loading","setLoading","error","setError","clientToken","setClientToken","TOKEN","getClientToken","params","origin","window","location","token","response","method","url","data","headers","Error","err","console","fetchPlant","attemptedIds","Set","today","Date","toISOString","split","dateNum","parseInt","replace","plantId","has","add","get","image_url","size","message","children","fileName","_jsxFileName","lineNumber","columnNumber","common_name","scientific_name","src","alt","family_common_name","year","bibliography","distribution","native","_c6","$RefreshReg$"],"sources":["C:/MyProjects/react-blog-template/src/components/Plant/PlantOfTheDay.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Container } from '../StyledComponents/StyledComponents';\nimport axios from 'axios';\n\nconst PlantImage = styled.img`\n    width: 100%;\n    max-width: 600px;\n    height: auto;\n    border-radius: 8px;\n    margin: 1rem 0;\n    object-fit: cover;\n`;\n\nconst PlantInfo = styled.div`\n    margin: 1rem 0;\n    padding: 1rem;\n    background-color: ${props => props.theme.colors.lightGray};\n    border-radius: 8px;\n`;\n\nconst PlantDetail = styled.div`\n    margin: 1rem 0;\n    \n    strong {\n        color: ${props => props.theme.colors.primary};\n    }\n`;\n\nconst LoadingContainer = styled(Container)`\n    text-align: center;\n    padding: 2rem;\n`;\n\nconst ErrorContainer = styled(Container)`\n    text-align: center;\n    padding: 2rem;\n    color: red;\n`;\n\nconst PlantOfTheDay = () => {\n    const [plant, setPlant] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [clientToken, setClientToken] = useState(null);\n    const TOKEN = 'YPL0oCPPmylIEwr78weBx3uvF4s3qv2k4YnjfaBC53M';\n\n    // First, get a client-side token\n    useEffect(() => {\n        const getClientToken = async () => {\n            try {\n                const params = {\n                    origin: window.location.origin,\n                    token: TOKEN\n                };\n\n                const response = await axios({\n                    method: 'post',\n                    url: '/api/auth/claim',\n                    data: params,\n                    headers: { \n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json'\n                    }\n                });\n\n                if (response.data && response.data.token) {\n                    setClientToken(response.data.token);\n                } else {\n                    throw new Error('No token received');\n                }\n            } catch (err) {\n                console.error('Error getting client token:', err);\n                setError('Failed to authenticate with the plant database');\n                setLoading(false);\n            }\n        };\n\n        getClientToken();\n    }, []);\n\n    // Then fetch the plant data once we have the client token\n    useEffect(() => {\n        const fetchPlant = async (attemptedIds = new Set()) => {\n            if (!clientToken) return;\n\n            try {\n                // Get today's date to generate a consistent ID\n                const today = new Date().toISOString().split('T')[0];\n                const dateNum = parseInt(today.replace(/-/g, ''), 10);\n                \n                // Use the date to select a plant ID between 1 and 10000\n                let plantId = (dateNum % 10000) + 1;\n\n                // If this ID has been attempted, increment until we find one we haven't tried\n                while (attemptedIds.has(plantId)) {\n                    plantId = (plantId % 10000) + 1;\n                }\n                attemptedIds.add(plantId);\n\n                const response = await axios.get(\n                    `/api/v1/species/${plantId}?token=${clientToken}`,\n                    {\n                        headers: {\n                            'Accept': 'application/json'\n                        }\n                    }\n                );\n\n                if (response.data && response.data.data) {\n                    // If the plant has no image and we haven't tried 5 times, try another plant\n                    if (!response.data.data.image_url && attemptedIds.size < 5) {\n                        return fetchPlant(attemptedIds);\n                    }\n                    setPlant(response.data.data);\n                } else {\n                    throw new Error('Invalid plant data received');\n                }\n                setLoading(false);\n            } catch (err) {\n                console.error('Error fetching plant:', err);\n                // If we haven't tried 5 times and got an error, try another plant\n                if (attemptedIds.size < 5) {\n                    return fetchPlant(attemptedIds);\n                }\n                setError(err.message);\n                setLoading(false);\n            }\n        };\n\n        fetchPlant();\n    }, [clientToken]);\n\n    if (loading) {\n        return (\n            <LoadingContainer>\n                <h2>Loading today's featured plant...</h2>\n            </LoadingContainer>\n        );\n    }\n\n    if (error) {\n        return (\n            <ErrorContainer>\n                <h2>Error loading plant</h2>\n                <p>{error}</p>\n            </ErrorContainer>\n        );\n    }\n\n    if (!plant) {\n        return (\n            <ErrorContainer>\n                <h2>No plant data available</h2>\n            </ErrorContainer>\n        );\n    }\n\n    return (\n        <Container>\n            <h2>{plant.common_name || plant.scientific_name}</h2>\n            \n            {plant.image_url && (\n                <PlantImage src={plant.image_url} alt={plant.common_name || plant.scientific_name} />\n            )}\n            \n            <PlantInfo>\n                <PlantDetail>\n                    <strong>Family:</strong> {plant.family_common_name}\n                </PlantDetail>\n                {plant.year && (\n                    <PlantDetail>\n                        <strong>Year Discovered:</strong> {plant.year}\n                    </PlantDetail>\n                )}\n                {plant.bibliography && (\n                    <PlantDetail>\n                        <strong>Origin:</strong> {plant.distribution.native}\n                    </PlantDetail>\n                )}\n            </PlantInfo>\n        </Container>\n    );\n};\n\nexport default PlantOfTheDay;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}