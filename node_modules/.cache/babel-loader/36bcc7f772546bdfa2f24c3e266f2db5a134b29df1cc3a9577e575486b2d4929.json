{"ast":null,"code":"var _jsxFileName = \"C:\\\\MyProjects\\\\react-blog-template\\\\src\\\\components\\\\Plant\\\\PlantOfTheDay.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Container } from '../StyledComponents/StyledComponents';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlantContainer = styled(Container)`\n    text-align: center;\n    max-width: 800px;\n    margin: 0 auto;\n    padding: 2rem;\n    width: 100%;\n    box-sizing: border-box;\n    position: relative;\n\n    @media (max-width: ${props => props.theme.queries.mobile}) {\n        padding: 1rem;\n    }\n\n    h2 {\n        margin-top: 1rem;\n    }\n\n    h3 {\n        margin-top: 2rem;\n    }\n\n    p {\n        margin: 1rem auto;\n        max-width: 600px;\n    }\n`;\n_c = PlantContainer;\nconst PlantImage = styled.img`\n    width: 100%;\n    max-width: 600px;\n    height: auto;\n    border-radius: 8px;\n    margin: 1rem 0;\n    object-fit: cover;\n`;\n_c2 = PlantImage;\nconst PlantInfo = styled.div`\n    margin: 1rem 0;\n    padding: 1rem;\n    background-color: ${props => props.theme.colors.lightGray};\n    border-radius: 8px;\n`;\n_c3 = PlantInfo;\nconst PlantDetail = styled.div`\n    margin: 1rem 0;\n    \n    strong {\n        color: ${props => props.theme.colors.primary};\n    }\n`;\n_c4 = PlantDetail;\nconst LoadingContainer = styled(Container)`\n    text-align: center;\n    padding: 2rem;\n`;\nconst ErrorContainer = styled(Container)`\n    text-align: center;\n    padding: 2rem;\n    color: red;\n`;\nconst NextButton = styled.button`\n    background-color: #333;\n    color: white;\n    padding: 0.8rem 1.5rem;\n    border: none;\n    border-radius: 4px;\n    font-size: 1rem;\n    cursor: pointer;\n    margin-top: 1rem;\n    transition: background-color 0.3s;\n\n    &:hover {\n        background-color: #555;\n    } \n`;\n_c5 = NextButton;\nconst PlantOfTheDay = () => {\n  _s();\n  const [plant, setPlant] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [clientToken, setClientToken] = useState(null);\n  const [currentPlantIndex, setCurrentPlantIndex] = useState(0);\n  const [plants, setPlants] = useState([]);\n  const history = useHistory();\n  const TOKEN = 'YPL0oCPPmylIEwr78weBx3uvF4s3qv2k4YnjfaBC53M';\n\n  // First, get a client-side token\n  useEffect(() => {\n    const getClientToken = async () => {\n      try {\n        const params = {\n          origin: window.location.origin,\n          token: TOKEN\n        };\n        const response = await axios({\n          method: 'post',\n          url: '/api/auth/claim',\n          data: params,\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          }\n        });\n        if (response.data && response.data.token) {\n          setClientToken(response.data.token);\n        } else {\n          throw new Error('No token received');\n        }\n      } catch (err) {\n        console.error('Error getting client token:', err);\n        setError('Failed to authenticate with the plant database');\n        setLoading(false);\n      }\n    };\n    getClientToken();\n  }, []);\n\n  // Then fetch the plant data once we have the client token\n  useEffect(() => {\n    const fetchPlant = async (attemptedIds = new Set()) => {\n      if (!clientToken) return;\n      try {\n        // Get a random plant ID between 1 and 10000\n        let plantId = Math.floor(Math.random() * 10000) + 1;\n\n        // If this ID has been attempted, try another one\n        while (attemptedIds.has(plantId)) {\n          plantId = Math.floor(Math.random() * 10000) + 1;\n        }\n        attemptedIds.add(plantId);\n        const response = await axios.get(`/api/v1/species/${plantId}?token=${clientToken}`, {\n          headers: {\n            'Accept': 'application/json'\n          }\n        });\n        if (response.data && response.data.data) {\n          // If the plant has no image and we haven't tried 5 times, try another plant\n          if (!response.data.data.image_url && attemptedIds.size < 5) {\n            return fetchPlant(attemptedIds);\n          }\n          setPlants(prevPlants => [...prevPlants, response.data.data]);\n          setPlant(response.data.data);\n        } else {\n          throw new Error('Invalid plant data received');\n        }\n      } catch (err) {\n        console.error('Error fetching plant:', err);\n        // If we haven't tried 5 times and got an error, try another plant\n        if (attemptedIds.size < 5) {\n          return fetchPlant(attemptedIds);\n        }\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n    fetchPlant();\n  }, [clientToken]);\n  const handleNext = () => {\n    if (plants.length > 0) {\n      setCurrentPlantIndex(prevIndex => (prevIndex + 1) % plants.length);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(PlantContainer, {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Loading plant data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(PlantContainer, {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this);\n  }\n  if (!plants.length) {\n    return /*#__PURE__*/_jsxDEV(PlantContainer, {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No plants available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }, this);\n  }\n  const currentPlant = plants[currentPlantIndex];\n  return /*#__PURE__*/_jsxDEV(PlantContainer, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: currentPlant.common_name || currentPlant.scientific_name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 13\n    }, this), currentPlant.image_url && /*#__PURE__*/_jsxDEV(PlantImage, {\n      src: currentPlant.image_url,\n      alt: currentPlant.common_name || currentPlant.scientific_name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(PlantInfo, {\n      children: [/*#__PURE__*/_jsxDEV(PlantDetail, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Family:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 21\n        }, this), \" \", currentPlant.family_common_name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this), currentPlant.year && /*#__PURE__*/_jsxDEV(PlantDetail, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Year Discovered:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 25\n        }, this), \" \", currentPlant.year]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 21\n      }, this), currentPlant.bibliography && /*#__PURE__*/_jsxDEV(PlantDetail, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Origin:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 25\n        }, this), \" \", currentPlant.distribution.native]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NextButton, {\n      onClick: handleNext,\n      children: \"Next Plant\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 9\n  }, this);\n};\n_s(PlantOfTheDay, \"PueZPBWmEPuks1e/jtMdnktHZnM=\", false, function () {\n  return [useHistory];\n});\n_c6 = PlantOfTheDay;\nexport default PlantOfTheDay;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"PlantContainer\");\n$RefreshReg$(_c2, \"PlantImage\");\n$RefreshReg$(_c3, \"PlantInfo\");\n$RefreshReg$(_c4, \"PlantDetail\");\n$RefreshReg$(_c5, \"NextButton\");\n$RefreshReg$(_c6, \"PlantOfTheDay\");","map":{"version":3,"names":["React","useState","useEffect","styled","Container","axios","useHistory","jsxDEV","_jsxDEV","PlantContainer","props","theme","queries","mobile","_c","PlantImage","img","_c2","PlantInfo","div","colors","lightGray","_c3","PlantDetail","primary","_c4","LoadingContainer","ErrorContainer","NextButton","button","_c5","PlantOfTheDay","_s","plant","setPlant","loading","setLoading","error","setError","clientToken","setClientToken","currentPlantIndex","setCurrentPlantIndex","plants","setPlants","history","TOKEN","getClientToken","params","origin","window","location","token","response","method","url","data","headers","Error","err","console","fetchPlant","attemptedIds","Set","plantId","Math","floor","random","has","add","get","image_url","size","prevPlants","message","handleNext","length","prevIndex","children","fileName","_jsxFileName","lineNumber","columnNumber","currentPlant","common_name","scientific_name","src","alt","family_common_name","year","bibliography","distribution","native","onClick","_c6","$RefreshReg$"],"sources":["C:/MyProjects/react-blog-template/src/components/Plant/PlantOfTheDay.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Container } from '../StyledComponents/StyledComponents';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\n\nconst PlantContainer = styled(Container)`\n    text-align: center;\n    max-width: 800px;\n    margin: 0 auto;\n    padding: 2rem;\n    width: 100%;\n    box-sizing: border-box;\n    position: relative;\n\n    @media (max-width: ${props => props.theme.queries.mobile}) {\n        padding: 1rem;\n    }\n\n    h2 {\n        margin-top: 1rem;\n    }\n\n    h3 {\n        margin-top: 2rem;\n    }\n\n    p {\n        margin: 1rem auto;\n        max-width: 600px;\n    }\n`;\n\nconst PlantImage = styled.img`\n    width: 100%;\n    max-width: 600px;\n    height: auto;\n    border-radius: 8px;\n    margin: 1rem 0;\n    object-fit: cover;\n`;\n\nconst PlantInfo = styled.div`\n    margin: 1rem 0;\n    padding: 1rem;\n    background-color: ${props => props.theme.colors.lightGray};\n    border-radius: 8px;\n`;\n\nconst PlantDetail = styled.div`\n    margin: 1rem 0;\n    \n    strong {\n        color: ${props => props.theme.colors.primary};\n    }\n`;\n\nconst LoadingContainer = styled(Container)`\n    text-align: center;\n    padding: 2rem;\n`;\n\nconst ErrorContainer = styled(Container)`\n    text-align: center;\n    padding: 2rem;\n    color: red;\n`;\n\nconst NextButton = styled.button`\n    background-color: #333;\n    color: white;\n    padding: 0.8rem 1.5rem;\n    border: none;\n    border-radius: 4px;\n    font-size: 1rem;\n    cursor: pointer;\n    margin-top: 1rem;\n    transition: background-color 0.3s;\n\n    &:hover {\n        background-color: #555;\n    } \n`;\n\nconst PlantOfTheDay = () => {\n    const [plant, setPlant] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [clientToken, setClientToken] = useState(null);\n    const [currentPlantIndex, setCurrentPlantIndex] = useState(0);\n    const [plants, setPlants] = useState([]);\n    const history = useHistory();\n    const TOKEN = 'YPL0oCPPmylIEwr78weBx3uvF4s3qv2k4YnjfaBC53M';\n\n    // First, get a client-side token\n    useEffect(() => {\n        const getClientToken = async () => {\n            try {\n                const params = {\n                    origin: window.location.origin,\n                    token: TOKEN\n                };\n\n                const response = await axios({\n                    method: 'post',\n                    url: '/api/auth/claim',\n                    data: params,\n                    headers: { \n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json'\n                    }\n                });\n\n                if (response.data && response.data.token) {\n                    setClientToken(response.data.token);\n                } else {\n                    throw new Error('No token received');\n                }\n            } catch (err) {\n                console.error('Error getting client token:', err);\n                setError('Failed to authenticate with the plant database');\n                setLoading(false);\n            }\n        };\n\n        getClientToken();\n    }, []);\n\n    // Then fetch the plant data once we have the client token\n    useEffect(() => {\n        const fetchPlant = async (attemptedIds = new Set()) => {\n            if (!clientToken) return;\n\n            try {\n                \n                // Get a random plant ID between 1 and 10000\n                let plantId = Math.floor(Math.random() * 10000) + 1;\n\n                // If this ID has been attempted, try another one\n                while (attemptedIds.has(plantId)) {\n                    plantId = Math.floor(Math.random() * 10000) + 1;\n                }\n                attemptedIds.add(plantId);\n\n                const response = await axios.get(\n                    `/api/v1/species/${plantId}?token=${clientToken}`,\n                    {\n                        headers: {\n                            'Accept': 'application/json'\n                        }\n                    }\n                );\n\n                if (response.data && response.data.data) {\n                    // If the plant has no image and we haven't tried 5 times, try another plant\n                    if (!response.data.data.image_url && attemptedIds.size < 5) {\n                        return fetchPlant(attemptedIds);\n                    }\n                    setPlants(prevPlants => [...prevPlants, response.data.data]);\n                    setPlant(response.data.data);\n                } else {\n                    throw new Error('Invalid plant data received');\n                }\n            } catch (err) {\n                console.error('Error fetching plant:', err);\n                // If we haven't tried 5 times and got an error, try another plant\n                if (attemptedIds.size < 5) {\n                    return fetchPlant(attemptedIds);\n                }\n                setError(err.message);\n                setLoading(false);\n            }\n        };\n\n        fetchPlant();\n    }, [clientToken]);\n\n    const handleNext = () => {\n        if (plants.length > 0) {\n            setCurrentPlantIndex((prevIndex) => (prevIndex + 1) % plants.length);\n        }\n    };\n\n    if (loading) {\n        return (\n            <PlantContainer>\n                <h2>Loading plant data...</h2>\n            </PlantContainer>\n        );\n    }\n\n    if (error) {\n        return (\n            <PlantContainer>\n                <h2>Error: {error}</h2>\n            </PlantContainer>\n        );\n    }\n\n    if (!plants.length) {\n        return (\n            <PlantContainer>\n                <h2>No plants available</h2>\n            </PlantContainer>\n        );\n    }\n\n    const currentPlant = plants[currentPlantIndex];\n\n    return (\n        <PlantContainer>\n            <h2>{currentPlant.common_name || currentPlant.scientific_name}</h2>\n          \n            {currentPlant.image_url && (\n                <PlantImage src={currentPlant.image_url} alt={currentPlant.common_name || currentPlant.scientific_name} />\n            )}  \n            \n            <PlantInfo>\n                <PlantDetail>\n                    <strong>Family:</strong> {currentPlant.family_common_name}\n                </PlantDetail>\n                {currentPlant.year && (\n                    <PlantDetail>\n                        <strong>Year Discovered:</strong> {currentPlant.year}\n                    </PlantDetail>\n                )}\n                {currentPlant.bibliography && (\n                    <PlantDetail>\n                        <strong>Origin:</strong> {currentPlant.distribution.native}\n                    </PlantDetail>\n                )}\n            </PlantInfo>\n            <NextButton onClick={handleNext}>Next Plant</NextButton>\n        </PlantContainer>\n    );\n};\n\nexport default PlantOfTheDay;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,SAAS,QAAQ,sCAAsC;AAChE,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,cAAc,GAAGN,MAAM,CAACC,SAAS,CAAC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyBM,KAAK,IAAIA,KAAK,CAACC,KAAK,CAACC,OAAO,CAACC,MAAM;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GAzBIL,cAAc;AA2BpB,MAAMM,UAAU,GAAGZ,MAAM,CAACa,GAAG;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GAPIF,UAAU;AAShB,MAAMG,SAAS,GAAGf,MAAM,CAACgB,GAAG;AAC5B;AACA;AACA,wBAAwBT,KAAK,IAAIA,KAAK,CAACC,KAAK,CAACS,MAAM,CAACC,SAAS;AAC7D;AACA,CAAC;AAACC,GAAA,GALIJ,SAAS;AAOf,MAAMK,WAAW,GAAGpB,MAAM,CAACgB,GAAG;AAC9B;AACA;AACA;AACA,iBAAiBT,KAAK,IAAIA,KAAK,CAACC,KAAK,CAACS,MAAM,CAACI,OAAO;AACpD;AACA,CAAC;AAACC,GAAA,GANIF,WAAW;AAQjB,MAAMG,gBAAgB,GAAGvB,MAAM,CAACC,SAAS,CAAC;AAC1C;AACA;AACA,CAAC;AAED,MAAMuB,cAAc,GAAGxB,MAAM,CAACC,SAAS,CAAC;AACxC;AACA;AACA;AACA,CAAC;AAED,MAAMwB,UAAU,GAAGzB,MAAM,CAAC0B,MAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GAdIF,UAAU;AAgBhB,MAAMG,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACkC,OAAO,EAAEC,UAAU,CAAC,GAAGnC,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACoC,KAAK,EAAEC,QAAQ,CAAC,GAAGrC,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACsC,WAAW,EAAEC,cAAc,CAAC,GAAGvC,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACwC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGzC,QAAQ,CAAC,CAAC,CAAC;EAC7D,MAAM,CAAC0C,MAAM,EAAEC,SAAS,CAAC,GAAG3C,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM4C,OAAO,GAAGvC,UAAU,CAAC,CAAC;EAC5B,MAAMwC,KAAK,GAAG,6CAA6C;;EAE3D;EACA5C,SAAS,CAAC,MAAM;IACZ,MAAM6C,cAAc,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACA,MAAMC,MAAM,GAAG;UACXC,MAAM,EAAEC,MAAM,CAACC,QAAQ,CAACF,MAAM;UAC9BG,KAAK,EAAEN;QACX,CAAC;QAED,MAAMO,QAAQ,GAAG,MAAMhD,KAAK,CAAC;UACzBiD,MAAM,EAAE,MAAM;UACdC,GAAG,EAAE,iBAAiB;UACtBC,IAAI,EAAER,MAAM;UACZS,OAAO,EAAE;YACL,cAAc,EAAE,kBAAkB;YAClC,QAAQ,EAAE;UACd;QACJ,CAAC,CAAC;QAEF,IAAIJ,QAAQ,CAACG,IAAI,IAAIH,QAAQ,CAACG,IAAI,CAACJ,KAAK,EAAE;UACtCZ,cAAc,CAACa,QAAQ,CAACG,IAAI,CAACJ,KAAK,CAAC;QACvC,CAAC,MAAM;UACH,MAAM,IAAIM,KAAK,CAAC,mBAAmB,CAAC;QACxC;MACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;QACVC,OAAO,CAACvB,KAAK,CAAC,6BAA6B,EAAEsB,GAAG,CAAC;QACjDrB,QAAQ,CAAC,gDAAgD,CAAC;QAC1DF,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAEDW,cAAc,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA7C,SAAS,CAAC,MAAM;IACZ,MAAM2D,UAAU,GAAG,MAAAA,CAAOC,YAAY,GAAG,IAAIC,GAAG,CAAC,CAAC,KAAK;MACnD,IAAI,CAACxB,WAAW,EAAE;MAElB,IAAI;QAEA;QACA,IAAIyB,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC;;QAEnD;QACA,OAAOL,YAAY,CAACM,GAAG,CAACJ,OAAO,CAAC,EAAE;UAC9BA,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC;QACnD;QACAL,YAAY,CAACO,GAAG,CAACL,OAAO,CAAC;QAEzB,MAAMX,QAAQ,GAAG,MAAMhD,KAAK,CAACiE,GAAG,CAC5B,mBAAmBN,OAAO,UAAUzB,WAAW,EAAE,EACjD;UACIkB,OAAO,EAAE;YACL,QAAQ,EAAE;UACd;QACJ,CACJ,CAAC;QAED,IAAIJ,QAAQ,CAACG,IAAI,IAAIH,QAAQ,CAACG,IAAI,CAACA,IAAI,EAAE;UACrC;UACA,IAAI,CAACH,QAAQ,CAACG,IAAI,CAACA,IAAI,CAACe,SAAS,IAAIT,YAAY,CAACU,IAAI,GAAG,CAAC,EAAE;YACxD,OAAOX,UAAU,CAACC,YAAY,CAAC;UACnC;UACAlB,SAAS,CAAC6B,UAAU,IAAI,CAAC,GAAGA,UAAU,EAAEpB,QAAQ,CAACG,IAAI,CAACA,IAAI,CAAC,CAAC;UAC5DtB,QAAQ,CAACmB,QAAQ,CAACG,IAAI,CAACA,IAAI,CAAC;QAChC,CAAC,MAAM;UACH,MAAM,IAAIE,KAAK,CAAC,6BAA6B,CAAC;QAClD;MACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;QACVC,OAAO,CAACvB,KAAK,CAAC,uBAAuB,EAAEsB,GAAG,CAAC;QAC3C;QACA,IAAIG,YAAY,CAACU,IAAI,GAAG,CAAC,EAAE;UACvB,OAAOX,UAAU,CAACC,YAAY,CAAC;QACnC;QACAxB,QAAQ,CAACqB,GAAG,CAACe,OAAO,CAAC;QACrBtC,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAEDyB,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,CAACtB,WAAW,CAAC,CAAC;EAEjB,MAAMoC,UAAU,GAAGA,CAAA,KAAM;IACrB,IAAIhC,MAAM,CAACiC,MAAM,GAAG,CAAC,EAAE;MACnBlC,oBAAoB,CAAEmC,SAAS,IAAK,CAACA,SAAS,GAAG,CAAC,IAAIlC,MAAM,CAACiC,MAAM,CAAC;IACxE;EACJ,CAAC;EAED,IAAIzC,OAAO,EAAE;IACT,oBACI3B,OAAA,CAACC,cAAc;MAAAqE,QAAA,eACXtE,OAAA;QAAAsE,QAAA,EAAI;MAAqB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB,CAAC;EAEzB;EAEA,IAAI7C,KAAK,EAAE;IACP,oBACI7B,OAAA,CAACC,cAAc;MAAAqE,QAAA,eACXtE,OAAA;QAAAsE,QAAA,GAAI,SAAO,EAACzC,KAAK;MAAA;QAAA0C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACX,CAAC;EAEzB;EAEA,IAAI,CAACvC,MAAM,CAACiC,MAAM,EAAE;IAChB,oBACIpE,OAAA,CAACC,cAAc;MAAAqE,QAAA,eACXtE,OAAA;QAAAsE,QAAA,EAAI;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChB,CAAC;EAEzB;EAEA,MAAMC,YAAY,GAAGxC,MAAM,CAACF,iBAAiB,CAAC;EAE9C,oBACIjC,OAAA,CAACC,cAAc;IAAAqE,QAAA,gBACXtE,OAAA;MAAAsE,QAAA,EAAKK,YAAY,CAACC,WAAW,IAAID,YAAY,CAACE;IAAe;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAElEC,YAAY,CAACZ,SAAS,iBACnB/D,OAAA,CAACO,UAAU;MAACuE,GAAG,EAAEH,YAAY,CAACZ,SAAU;MAACgB,GAAG,EAAEJ,YAAY,CAACC,WAAW,IAAID,YAAY,CAACE;IAAgB;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAC5G,eAED1E,OAAA,CAACU,SAAS;MAAA4D,QAAA,gBACNtE,OAAA,CAACe,WAAW;QAAAuD,QAAA,gBACRtE,OAAA;UAAAsE,QAAA,EAAQ;QAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACC,YAAY,CAACK,kBAAkB;MAAA;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChD,CAAC,EACbC,YAAY,CAACM,IAAI,iBACdjF,OAAA,CAACe,WAAW;QAAAuD,QAAA,gBACRtE,OAAA;UAAAsE,QAAA,EAAQ;QAAgB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACC,YAAY,CAACM,IAAI;MAAA;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3C,CAChB,EACAC,YAAY,CAACO,YAAY,iBACtBlF,OAAA,CAACe,WAAW;QAAAuD,QAAA,gBACRtE,OAAA;UAAAsE,QAAA,EAAQ;QAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACC,YAAY,CAACQ,YAAY,CAACC,MAAM;MAAA;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjD,CAChB;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACM,CAAC,eACZ1E,OAAA,CAACoB,UAAU;MAACiE,OAAO,EAAElB,UAAW;MAAAG,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5C,CAAC;AAEzB,CAAC;AAAClD,EAAA,CAvJID,aAAa;EAAA,QAOCzB,UAAU;AAAA;AAAAwF,GAAA,GAPxB/D,aAAa;AAyJnB,eAAeA,aAAa;AAAC,IAAAjB,EAAA,EAAAG,GAAA,EAAAK,GAAA,EAAAG,GAAA,EAAAK,GAAA,EAAAgE,GAAA;AAAAC,YAAA,CAAAjF,EAAA;AAAAiF,YAAA,CAAA9E,GAAA;AAAA8E,YAAA,CAAAzE,GAAA;AAAAyE,YAAA,CAAAtE,GAAA;AAAAsE,YAAA,CAAAjE,GAAA;AAAAiE,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}